<?php

use ComboStrap\CallStack;
use ComboStrap\PluginUtility;
use ComboStrap\TagAttributes;


/**
 * Class headingwiki
 * Taking over {@link \dokuwiki\Parsing\ParserMode\Header}
 */
class syntax_plugin_combo_headingwiki extends DokuWiki_Syntax_Plugin
{

    /**
     * Header pattern that we expect ie  ==== Hello =====
     * Found in {@link \dokuwiki\Parsing\ParserMode\Header}
     * One modification is that it permits one `=` to get the h6
     */
    const HEADING_PATTERN = '[ \t]*={1,}[^\n]+={1,}[ \t]*(?=\n)';
    const TITLE = 'title';

    public function getSort()
    {
        /**
         * Less than 50 from
         * {@link \dokuwiki\Parsing\ParserMode\Header::getSort()}
         */
        return 49;
    }

    public function getType()
    {
        return syntax_plugin_combo_heading::SYNTAX_TYPE;
    }


    /**
     *
     * How Dokuwiki will add P element
     *
     *  * 'normal' - The plugin can be used inside paragraphs (inline)
     *  * 'block'  - Open paragraphs need to be closed before plugin output - block should not be inside paragraphs
     *  * 'stack'  - Special case. Plugin wraps other paragraphs. - Stacks can contain paragraphs
     *
     * @see DokuWiki_Syntax_Plugin::getPType()
     *
     * This is the equivalent of inline or block for css
     */
    public function getPType()
    {
        return syntax_plugin_combo_heading::SYNTAX_PTYPE;
    }

    public function connectTo($mode)
    {
        parent::connectTo($mode); // TODO: Change the autogenerated stub
    }


    public function handle($match, $state, $pos, Doku_Handler $handler)
    {
        /**
         * Title regexp
         */
        $attributes = self::parseWikiHeading($match);
        $callStack = CallStack::createFromHandler($handler);

        $parentTag = $callStack->moveToParent();
        if ($parentTag == false) {
            $context = "";
        } else {
            $context = $parentTag->getTagName();
        }


        return array(
            PluginUtility::STATE => $state,
            PluginUtility::ATTRIBUTES => $attributes,
            PluginUtility::CONTEXT => $context
        );
    }

    public function render($format, Doku_Renderer $renderer, $data)
    {

        /**
         * The short title ie ( === title === )
         */
        $callStackArray = $data[PluginUtility::ATTRIBUTES];
        $tagAttributes = TagAttributes::createFromCallStackArray($callStackArray);
        $context = $data[PluginUtility::CONTEXT];
        $title = $tagAttributes->getValueAndRemove(self::TITLE);
        syntax_plugin_combo_heading::renderOpeningTag($context, $tagAttributes, $renderer);
        $renderer->doc .= PluginUtility::htmlEncode($title);
        $renderer->doc .= syntax_plugin_combo_heading::renderClosingTag($tagAttributes);


    }

    public
    static function parseWikiHeading($match)
    {
        $title = trim($match);
        $level = 7 - strspn($title, '=');
        if ($level < 1) $level = 1;
        $title = trim($title, '=');
        $title = trim($title);
        $parameters[self::TITLE] = $title;
        $parameters[syntax_plugin_combo_heading::LEVEL] = $level;
        return $parameters;
    }

}
